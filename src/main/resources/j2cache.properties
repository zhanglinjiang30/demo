#J2Cache configuration


#########################################
# Cache Broadcast Method
# values:
# jgroups -> use jgroups's multicast
# redis -> use redis publish/subscribe mechanism (using jedis)
# lettuce -> use redis publish/subscribe mechanism (using lettuce, Recommend)
# rabbitmq -> use RabbitMQ publisher/consumer mechanism
# rocketmq -> use RocketMQ publisher/consumer mechanism
# none -> don't notify the other nodes in cluster
# xx.xxxx.xxxx.Xxxxx your own cache broadcast policy classname that implement net.oschina.j2cache.cluster.ClusterPolicy
#缓存广播方法
#值:
# jgroups ->使用jgroups的多播
# redis ->使用redis发布/订阅机制(使用jedis)
#莴苣->使用redis发布/订阅机制(使用莴苣，推荐)
# Rabbtmq->使用Rabbtmq发布者/消费者机制
# Rockemq->使用Rockemq发布者/消费者机制
# none ->不通知集群中的其他节点
# xx.xxxx.xxxx.Xxxxx您自己的实现net . oschina . J2 cache . cluster . ClusterPolicy的缓存广播策略类名
#########################################
j2cache.open-spring-cache=true
j2cache.cache-clean-mode=passive
j2cache.allow-null-values=true
j2cache.redis-client=lettuce
j2cache.broadcast = lettuce
j2cache.l2-cache-open=true
#
## jgroups properties
#jgroups.channel.name = j2cache
#jgroups.configXml = /network.xml
#
## RabbitMQ properties
#rabbitmq.exchange = j2cache
#rabbitmq.host = localhost
#rabbitmq.port = 5672
#rabbitmq.username = guest
#rabbitmq.password = guest
#
## RocketMQ properties
#rocketmq.name = j2cache
#rocketmq.topic = j2cache
## use ; to split multi hosts
#rocketmq.hosts = 127.0.0.1:9876

#########################################
# Level 1&2 provider
# values:
# none -> disable this level cache
# ehcache -> use ehcache2 as level 1 cache
# ehcache3 -> use ehcache3 as level 1 cache
# caffeine -> use caffeine as level 1 cache(only in memory)
# redis -> use redis as level 2 cache (using jedis)
# lettuce -> use redis as level 2 cache (using lettuce)
# readonly-redis -> use redis as level 2 cache ,but never write data to it. if use this provider, you must uncomment `j2cache.L2.config_section` to make the redis configurations available.
# memcached -> use memcached as level 2 cache (xmemcached),
# [classname] -> use custom provider
# 1 & 2级供应商
#值:
#无->禁用该级缓存
# ehcache ->使用ehcache2作为一级缓存
# ehcache3 ->使用ehcache3作为一级缓存
#咖啡因->使用咖啡因作为一级缓存(仅在内存中)
# redis ->使用redis作为二级缓存(使用jedis)
#莴苣->使用redis作为二级缓存(使用莴苣)
# readonly-redis ->使用redis作为二级缓存，但不要向其写入数据。如果使用此提供程序，您必须取消注释“j2cache.L2.config_section”以使redis配置可用。
# memcached ->使用memcached作为二级缓存(xmemcached)，
#[类名] ->使用自定义提供程序
#########################################

j2cache.L1.provider_class = ehcache3
j2cache.L2.provider_class = lettuce

# When L2 provider isn't `redis`, using `L2.config_section = redis` to read redis configurations
j2cache.L2.config_section = lettuce

# Enable/Disable ttl in redis cache data (if disabled, the object in redis will never expire, default:true)
# NOTICE: redis hash mode (redis.storage = hash) do not support this feature)
j2cache.sync_ttl_to_redis = true

# Whether to cache null objects by default (default false)
j2cache.default_cache_null_object = false

#########################################
# Cache Serialization Provider
# values:
# fst -> using fast-serialization (recommend)
# kryo -> using kryo serialization
# json -> using fst's json serialization (testing)
# fastjson -> using fastjson serialization (embed non-static class not support)
# java -> java standard
# fse -> using fse serialization
# [classname implements Serializer]
#缓存序列化提供程序
#值:
# fst ->使用快速序列化(推荐)
# kryo ->使用kryo序列化
# json ->使用fst的json序列化(测试)
# fastjson ->使用fastjson序列化(不支持嵌入非静态类)
# java -> java标准
# fse ->使用fse序列化
#[类名实现序列化程序]
#########################################

j2cache.serialization = fst
#json.map.person = net.oschina.j2cache.demo.Person

#########################################
# Ehcache configuration
#########################################

#ehcache.configXml = /ehcache3.xml

ehcache3.configXml = /ehcache3.xml
ehcache3.defaultHeapSize = 1000

#########################################
# Caffeine configuration
# caffeine.region.[name] = size, xxxx[s|m|h|d]
#
#########################################
caffeine.properties = /caffeine.properties

#########################################
# Redis connection configuration
#########################################

#########################################
# Redis Cluster Mode
#
# single -> single redis server
# sentinel -> master-slaves servers
# cluster -> cluster servers (\u6570\u636e\u5e93\u914d\u7f6e\u65e0\u6548\uff0c\u4f7f\u7528 database = 0\uff09
# sharded -> sharded servers  (\u5bc6\u7801\u3001\u6570\u636e\u5e93\u5fc5\u987b\u5728 hosts \u4e2d\u6307\u5b9a\uff0c\u4e14\u8fde\u63a5\u6c60\u914d\u7f6e\u65e0\u6548 ; redis://user:password@127.0.0.1:6379/0\uff09
#
#########################################

#redis.mode = single

#redis storage mode (generic|hash)
#redis.storage = generic

## redis pub/sub channel name
#redis.channel = j2cache
    ## redis pub/sub server (using redis.hosts when empty)
#redis.channel.host =

#cluster name just for sharded
#redis.cluster_name = j2cache

## redis cache namespace optional, default[empty]
#redis.namespace =

## redis command scan parameter count, default[1000]
#redis.scanCount = 1000

## connection
# Separate multiple redis nodes with commas, such as 192.168.0.10:6379,192.168.0.11:6379,192.168.0.12:6379

#redis.hosts = 127.0.0.1:6379
#redis.timeout = 2000
#redis.password = 1qaz
#redis.database = 0
#redis.ssl = false

## redis pool properties
#redis.maxTotal = 100
#redis.maxIdle = 10
#redis.maxWaitMillis = 5000
#redis.minEvictableIdleTimeMillis = 60000
#redis.minIdle = 1
#redis.numTestsPerEvictionRun = 10
#redis.lifo = false
#redis.softMinEvictableIdleTimeMillis = 10
#redis.testOnBorrow = true
#redis.testOnReturn = false
#redis.testWhileIdle = true
#redis.timeBetweenEvictionRunsMillis = 300000
#redis.blockWhenExhausted = false
#redis.jmxEnabled = false

#########################################
# Lettuce scheme
#
# redis -> single redis server
# rediss -> single redis server with ssl
# redis-sentinel -> redis sentinel
# redis-cluster -> cluster servers
#
#########################################

### redis command scan parameter count, default[1000]
##lettuce.scanCount = 1000
#lettuce.namespace =
#lettuce.storage = hash
#lettuce.channel = j2cache
#lettuce.scheme = redis
#lettuce.hosts = 127.0.0.1:6379
#lettuce.password = 1qaz
#lettuce.database = 0
#lettuce.sentinelMasterId =
#lettuce.maxTotal = 100
#lettuce.maxIdle = 10
#lettuce.minIdle = 10
## timeout in milliseconds
#lettuce.timeout = 10000
## redis cluster topology refresh interval in milliseconds
#lettuce.clusterTopologyRefresh = 3000

#########################################
# memcached server configurations
# refer to https://gitee.com/mirrors/XMemcached
#########################################

#memcached.servers = 127.0.0.1:11211
#memcached.username =
#memcached.password =
#memcached.connectionPoolSize = 10
#memcached.connectTimeout = 1000
#memcached.failureMode = false
#memcached.healSessionInterval = 1000
#memcached.maxQueuedNoReplyOperations = 100
#memcached.opTimeout = 100
#memcached.sanitizeKeys = false

lettuce.mode=single
lettuce.namespace=lanhoo-smartsite
lettuce.cluster_name=mymaster
lettuce.storage=generic
lettuce.channel=j2cache
lettuce.scheme=redis
lettuce.hosts=101.35.87.243
lettuce.password=1qaz
lettuce.database=0
lettuce.sentinelMasterId=
lettuce.maxTotal=100
lettuce.maxIdle=10
lettuce.minIdle=10
lettuce.timeout=10000
